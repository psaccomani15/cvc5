diff --git a/include/CoCoA/TmpGPoly.H b/include/CoCoA/TmpGPoly.H
index 4c4d51e..3e7fa1a 100644
--- a/include/CoCoA/TmpGPoly.H
+++ b/include/CoCoA/TmpGPoly.H
@@ -29,6 +29,7 @@
 #include "CoCoA/TmpGTypes.H"
 #include "CoCoA/utils.H"
 
+#include <functional>
 #include<list>
 // using std::list; // for GPolyList; GPolyPtrList;
 #include<vector>
@@ -46,7 +47,21 @@ enum ClearMarker {clear};
 
 class GPoly;
 
-
+extern bool handlersEnabled;
+extern std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyHandler;
+extern std::function<void(ConstRefRingElem p)> reductionStartHandler;
+extern std::function<void(ConstRefRingElem q)> reductionStepHandler;
+extern std::function<void(ConstRefRingElem r)> reductionEndHandler;
+
+extern bool proofEnabled;
+extern std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyProof;
+extern std::function<void(ConstRefRingElem p)> reductionStartProof;
+extern std::function<void(ConstRefRingElem q)> reductionStepProof;
+extern std::function<void(ConstRefRingElem r)> reductionEndProof;
+extern std::function<void(ConstRefRingElem p)> membershipStart;
+extern std::function<void(RingElem s)> membershipStep;
+extern std::function<void(void)> membershipEnd;
+  
 typedef std::list<GPoly> GPolyList;
 
 
diff --git a/src/AlgebraicCore/PolyRing-content.C b/src/AlgebraicCore/PolyRing-content.C
index c5d0a0a..a984f23 100644
--- a/src/AlgebraicCore/PolyRing-content.C
+++ b/src/AlgebraicCore/PolyRing-content.C
@@ -33,7 +33,7 @@
 #include "CoCoA/convert.H"
 #include "CoCoA/error.H"
 #include "CoCoA/utils.H"  // for len
-
+#include "CoCoA/TmpGPoly.H"
 
 #include <vector>
 // using std::vector;
@@ -128,7 +128,11 @@ namespace CoCoA
   {
     const PolyRing Rx = owner(f);
     RingElem ans(Rx);
+    if (handlersEnabled) reductionStartHandler(f);
+    if (proofEnabled) reductionStartProof(f);	  
     Rx->myMonic(raw(ans), raw(f));
+    if (handlersEnabled) reductionEndHandler(f);
+    if (proofEnabled) reductionEndProof(f);	  
     return ans;
   }
 
diff --git a/src/AlgebraicCore/SparsePolyOps-reduce.C b/src/AlgebraicCore/SparsePolyOps-reduce.C
index b5b8b43..a26f652 100644
--- a/src/AlgebraicCore/SparsePolyOps-reduce.C
+++ b/src/AlgebraicCore/SparsePolyOps-reduce.C
@@ -134,6 +134,8 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
       v.myGRingInfo().myCheckForTimeout("ReduceActiveLM");
       s->myUpdate(F, *g);
       F->myReduce(poly(*g), NumTerms(*g));
+      if( handlersEnabled ) reductionStepHandler(poly(*g));
+      if( proofEnabled ) reductionStepProof(poly(*g));
     }//while
   }//ReduceActiveLM
 
@@ -269,6 +271,8 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
   void GPoly::myReduce(const Reductors& theReductors)
   {
     if ( IsZero(*this) ) return;
+    if ( handlersEnabled ) reductionStartHandler(myPoly());
+    if ( proofEnabled ) reductionStartProof(myPoly());
     ReductionCog F = ChooseReductionCogGeobucket(myGRingInfo());
     F->myAssignReset(myPolyValue, myNumTerms); // myPolyValue gets 0
     reduce(F, mySugar, theReductors); // mySugar updated
@@ -278,6 +282,8 @@ degree HereForProfilingOnlyWDeg(ConstRefPPMonoidElem cofactor1)
     if ( !IsZero(*this) && !IsOne(myLCValue) ) // makes myPolyValue monic
       if ( myGRingInfo().myCoeffRingType()==CoeffEncoding::Field )
         myGRingInfo().myNewSPR()->myDivByCoeff(raw(myPolyValue), raw(myLCValue));
+    if ( handlersEnabled ) reductionEndHandler(myPoly());
+    if ( proofEnabled ) reductionEndProof(myPoly());
     // if CoeffEncoding::Field myRelease does NOT make poly monic
     // if CoeffEncoding::FrFldOfGCDDomain myRelease makes poly content free
   }
diff --git a/src/AlgebraicCore/SparsePolyOps-vector.C b/src/AlgebraicCore/SparsePolyOps-vector.C
index 2d5fe05..97e025d 100644
--- a/src/AlgebraicCore/SparsePolyOps-vector.C
+++ b/src/AlgebraicCore/SparsePolyOps-vector.C
@@ -26,7 +26,7 @@
 #include "CoCoA/verbose.H"
 #include "CoCoA/ReductionCog.H"
 
-
+#include "CoCoA/TmpGPoly.H"
 //#include <vector>
 using std::vector;
 
@@ -146,6 +146,7 @@ namespace CoCoA
     int i;
     while ( (i = FindReducerIndex(F, v) ) != -1)
     {
+      if(proofEnabled) membershipStep(v[i]);
       CheckForInterrupt("ReduceActiveLM");
       F->myReduce(v[i]);
     }
@@ -173,11 +174,13 @@ namespace CoCoA
       CoCoA_THROW_ERROR(ERR::MixedRings, FnName);
     if ( IsZero(f) ) return f;
     if ( v.empty() ) return f;
+    if(proofEnabled) membershipStart(f);
     RingElem ans(f);
     ReductionCog F = NewRedCogGeobucketField(owner(ans));
     F->myAssignReset(ans);
     reduce(F, v);
     F->myRelease(ans);
+    if(proofEnabled) membershipEnd();
     return ans;
   }
 
diff --git a/src/AlgebraicCore/TmpGPoly.C b/src/AlgebraicCore/TmpGPoly.C
index ea250d4..e1345ef 100644
--- a/src/AlgebraicCore/TmpGPoly.C
+++ b/src/AlgebraicCore/TmpGPoly.C
@@ -47,7 +47,19 @@ using std::vector;
 namespace CoCoA
 {  
 
-
+  bool handlersEnabled = false;
+  std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyHandler = nullptr;
+  std::function<void(ConstRefRingElem p)> reductionStartHandler = nullptr;
+  std::function<void(ConstRefRingElem q)> reductionStepHandler = nullptr;
+  std::function<void(ConstRefRingElem r)> reductionEndHandler = nullptr;
+  bool proofEnabled = false;
+  std::function<void(ConstRefRingElem p, ConstRefRingElem q, ConstRefRingElem s)> sPolyProof = nullptr;
+  std::function<void(ConstRefRingElem p)> reductionStartProof = nullptr;
+  std::function<void(ConstRefRingElem q)> reductionStepProof = nullptr;
+  std::function<void(ConstRefRingElem r)> reductionEndProof = nullptr;
+  std::function<void(ConstRefRingElem p)> membershipStart = nullptr;
+  std::function<void(RingElem s)> membershipStep = nullptr;
+  std::function<void(void)> membershipEnd = nullptr;
   //---------class GPoly-------------------------------
 
   // WARNING: is not possible to build the zero GPoly here.
@@ -300,8 +312,11 @@ void GPoly::myUpdateLenLPPLCDegComp()
     myMinimalGenLevel = -1;
     if (the_gp.IsInputPoly())
       myPolyValue = poly(the_gp.myFirstGPoly());
-    else
+    else{
       myPolySetSPoly(the_gp.myFirstGPoly(), the_gp.mySecondGPoly());
+      if ( handlersEnabled ) sPolyHandler(the_gp.myFirstGPoly().myPoly(), the_gp.mySecondGPoly().myPoly(), myPoly());
+      if ( proofEnabled ) sPolyProof(the_gp.myFirstGPoly().myPoly(), the_gp.mySecondGPoly().myPoly(), myPoly());
+    }
     myUpdateLenLPPLCDegComp();
     myAge = the_age;
     // MAX: do these things only if necessary.
