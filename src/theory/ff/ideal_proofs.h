/******************************************************************************
 * Top contributors (to current version):
 *   Alex Ozdemir
 *
 * This file is part of the cvc5 project.
 *
 * Copyright (c) 2009-2023 by the authors listed in the file AUTHORS
 * in the top-level source directory and their institutional affiliations.
 * All rights reserved.  See the file COPYING in the top-level source
 * directory for licensing information.
 * ****************************************************************************
 *
 * Finite fields UNSAT trace construction
 */

#include <vector>

#include "cvc5_private.h"

#if CVC5_USE_COCOA
#ifndef CVC5__THEORY__IDEAL__PROOF_H
#define CVC5__THEORY__IDEAL__PROOF_H

#include <CoCoA/TmpGPoly.H>
#include <CoCoA/ring.H>

#include <functional>
#include <unordered_map>

#include "context/cdlist_forward.h"
#include "proof/proof.h"
#include "smt/env_obj.h"
#include "theory/ff/cocoa_encoder.h"
#include "theory/ff/membership_proofs.h"
namespace cvc5::internal {
namespace theory {
namespace ff {

/**
 * A non-incremental dependency graph for CoCoA polynomials in Groebner basis
 * computation.
 *
 * We represent polynomials as their strings.
 */
class IdealProof : protected EnvObj
{
 public:
  /**
   * Create an object that will contain proofs for a given a ideal.
   * @param The cvc5 enviroment
   * @param id: The id of the proof engine
   * @param inputs: The set of generators.
   * @param nonEmptyVarPred: A predicate representing that the set of common
   * roots of inputs is non empty.
   * @param cocoaIdeal: The data structure of an ideal in cocoalib.
   */
  IdealProof(Env& env,
             size_t id,
             const std::vector<CoCoA::RingElem>& inputs,
             CocoaEncoder& enc,
             CoCoA::ideal cocoaIdeal);
  /**
   * Setup the hooks in cocoalib
   */
  void setFunctionPointers();
  /**
   * Enable execution of the hooks.
   */
  void enableProofHooks();
  /**
   * Disable hook execution.
   */
  void disableProofHooks();

  /**
   * Called when we are branching on the roots of a polynomial. Register this
   * polynomial in the representation.
   * @param branchPoly: The polynomial in which we are branching.
   */
  void registerBranchPolynomial(CoCoA::RingElem branchPoly);

  /**
   * Also called only when we are branching on the rooots of a polynmial.
   * Register the roots of this polynomial in the representation.
   * @param roots: The roots of the branching polynomial.
   */
  void registerRoots(std::vector<CoCoA::RingElem> roots);

  /**
   * Register a possible conclusion derived from the current object.
   * A conclusion consists in a disjunct of a branching application, i.e a
   * possible valid assignment.
   * @param choicePoly: A polynomial in the "x - a" format, where x is a
   * non-assigned variable and a fixed element in the finite field. Equivalent
   * to assign x to a.
   * @param newIdeal: The new cocoaIdeal generated by adding the choicePoly to
   * the set of generators.
   * @return An IdealProof object for the newIdeal.
   */
  std::shared_ptr<IdealProof> registerConclusion(CoCoA::RingElem choicePoly,
                                                 CoCoA::ideal newIdeal);
  /**
   * Called only when the branching of the current object is unsat.
   * Register a node in globalTheoryProofs containing the fact that the set of
   * generators does not have any common root.
   * @param rootBranching: Wheter we are branching on roots or by exhaustion.
   * @param globalTheoryProofs: The global theory CDProof enviroment in which we
   * register all proofs of this kind.
   */
  void finishProof(bool rootBranching, CDProof* globalTheoryProofs);

  /**
   * Register the fact that the unit belongs to the ideal i.e that the set of
   * the generators does not have any common root.
   * @param p: The unit.
   * @param globalTheoryProofs: The global theory CDProof enviroment in which we
   * register all proofs of this kind.
   */
  Node oneInUnsat(CoCoA::RingElem p, CDProof* globalTheoryProofs);

  /**
   * @return The node that represents the fact that the set of generators does
   * not have any common roots.
   */
  Node getUnsatFact();

  /**
   * @return  The node that represents the assumption that the set of generators
   * have common roots.
   */

  Node getSatFact();

  static Node nonEmptyVarPred(NodeManager* nm, Node ideal);
  void updateIdeal(std::vector<Node>& newGens);

 private:
  /**
   * Produces the Node that represents the conclusion of branching rules. Also
   * use those rules to prove its correctness.
   * @param childrenSatFact: A vector of Nodes that represents the assumption
   * that each of the branching disjuncts is SAT.
   * @param rootBranching: Represents the proof step taken. If true, then we are
   * branching on roots of a univariate polynomial, else, the branching is
   * exhaustive.
   */
  Node produceConclusion(std::vector<Node>& childrenSatFact,
                         bool rootBranching);

  /**
   * A representation of the Ideal that we are currently proving membership
   * facts.
   */
  Node d_ideal;

  /**
   * The d_ideal representation in CoCoALib.
   */
  CoCoA::ideal d_cocoaIdeal;
  /**
   * The encoder used during node -> CoCoA translation. Used to get terms
   * associated with indeterminates.
   */
  CocoaEncoder d_enc;

  /**
   * A node representing the fact that our set of generators does not have any
   * common roots.
   * Initialized only when there is a proof for this fact.
   */
  Node d_emptyVarFact;

  /**
   * The polynomial used in the branching steps.
   */
  Node d_branchPoly;

  /**
   * The proof of membership for the branching polynomial.
   */
  Node d_branchPolyProof;

  /**
   * The roots of the above polynomial. An sexpr of finite field constants. If
   * there is no roots, it's an empty sexpr.
   */
  Node d_branchPolyRoots;

  /**
   * Holds elements in the branching disjunct.
   */
  std::vector<std::shared_ptr<IdealProof>> d_childrenProofs;

  /**
   * Maps string representation of polynomials to their corresponding Nodes.
   */
  std::unordered_map<std::string, Node> d_polyToNode;

  /**
   * The user-context-dependent proof object
   */
  CDProof d_proof;
  /**
   * The id of the proof object.
   */
  size_t d_id;
  /**
   * Manages membership proofs for polynomials in this ideal.
   */
  GBProof* d_membershipProofs;
};

}  // namespace ff
}  // namespace theory
}  // namespace cvc5::internal

#endif /* CVC5__THEORY__FF__PROOF_H */

#endif /* CVC5_USE_COCOA */
